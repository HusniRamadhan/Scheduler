@extends('ui_dashboard.dashboard')
@section('title', 'Penjadwalan Mata Kuliah')
@section('pageSize', 'min-height: 1300px;')
@section('css')
    <style>
        .modal-xl {
            max-width: 100%;
            /* Change this percentage to make it larger or smaller */
        }
    </style>
@endsection
@section('headScript')
    <link rel="stylesheet" href="{{ asset('plugins/icheck-bootstrap/icheck-bootstrap.min.css') }}">
    <link rel="stylesheet" href="{{ asset('plugins/icheck-bootstrap/icheck-bootstrap.css') }}">
@endsection
@section('script')
    <script>
        $(document).ready(function() {
            var currentSemester = '{{ $semester }}'; // Ambil nilai semester dari backend
            // ========================================
            // Penjadwalan Mata Kuliah Semester Card (Regular Courses)
            // ========================================
            function loadMakul(semester) {
                $.ajax({
                    url: '{{ route('adminSchedulingInputAjax') }}',
                    method: 'GET',
                    data: {
                        semester: semester
                    },
                    success: function(response) {
                        $('#makulTable tbody').html(response.html);
                        updateTextareaKodeAjar
                            ();
                    },
                    error: function(xhr, status, error) {
                        alert('Terjadi kesalahan saat memuat data Mata Kuliah! Error: ' + error);
                    }
                });
            }
            loadMakul('{{ $semester }}');
            $('#semesterSelector').change(function() {
                var selectedSemester = $(this).val();
                loadMakul(selectedSemester);
            });
            // ========================================
            // Mata Kuliah Pilihan Card (Elective Courses)
            // ========================================
            function loadMakulPilihan() {
                $.ajax({
                    url: '{{ route('adminSchedulingInputAjax') }}',
                    method: 'GET',
                    data: {
                        semester: '{{ $semester }}',
                        is_pilihan: true
                    },
                    success: function(response) {
                        $('#makulPilihanTable tbody').html(response
                            .html);
                    },
                    error: function(xhr, status, error) {
                        alert('Terjadi kesalahan saat memuat data Mata Kuliah Pilihan! Error: ' +
                            error);
                    }
                });
            }
            loadMakulPilihan();
            // ========================================
            // Event delegation for "Otomatis" buttons in both regular and Mata Kuliah Pilihan cards
            // ========================================
            $(document).on('click', '.btn-buat-kelas', function() {
                var row = $(this).closest('tr');
                var makulKode = row.data('kode');
                var kodeInfo = row.data('info');
                var kuota = $('#kuota-' + makulKode).val();
                var jumlahMahasiswa = row.find('.jumlah-mahasiswa').text();
                var jumlahKelas = Math.ceil(jumlahMahasiswa / kuota);
                var isMakulPilihan = row.find('.makul-checkbox').length >
                    0; // Mengecek apakah ini Mata Kuliah Pilihan

                if (!isMakulPilihan || row.find('.makul-checkbox').is(':checked')) {
                    $('#class-rows-' + makulKode + ' tbody').empty();
                    for (let i = 0; i < jumlahKelas; i++) {
                        let classLetter = String.fromCharCode(65 + i);
                        // Hanya ubah semester untuk Mata Kuliah Pilihan
                        var semesterValue = isMakulPilihan && currentSemester == 0 ? 7 : (isMakulPilihan &&
                            currentSemester == 1 ? 6 : row.data('semester'));

                        var newRow = `
                <tr data-info="${kodeInfo}" data-kode="${makulKode}" data-kelas="${classLetter}" data-semester="${semesterValue}" data-sks="${row.data('sks')}">
                    <td>${classLetter}</td>
                    <td>
                        <select class="form-control dosen1-select" name="dosen1_${makulKode}_${classLetter}" data-makul="${makulKode}" data-class="${classLetter}">
                            <option value="">Pilih Dosen 1</option>
                            @foreach ($dosens as $dosen)
                                <option value="{{ $dosen->kode_dosen }}">{{ $dosen->nama_dosen }}</option>
                            @endforeach
                        </select>
                    </td>
                    <td>
                        <select class="form-control dosen2-select" name="dosen2_${makulKode}_${classLetter}" data-makul="${makulKode}" data-class="${classLetter}" disabled>
                            <option value="">Pilih Dosen 2 (Optional)</option>
                            @foreach ($dosens as $dosen)
                                <option value="{{ $dosen->kode_dosen }}">{{ $dosen->nama_dosen }}</option>
                            @endforeach
                        </select>
                    </td>
                    <td class="kode-ajar">${kodeInfo} <span style="color: red;">(Dosen Belum Dipilih)</span></td>
                    <td>
                        <button class="btn btn-danger btn-hapus-kelas" data-kelas="${classLetter}" data-kode="${makulKode}">Hapus</button>
                    </td>
                </tr>`;
                        $('#class-rows-' + makulKode + ' tbody').append(newRow);
                    }
                    attachDosenDropdownBehavior();
                    updateTextareaKodeAjar();
                }
            });

            function attachDosenDropdownBehavior() {
                $('.dosen1-select').off('change').on('change', function() {
                    const dosen1Value = $(this).val();
                    const dosen2Dropdown = $(this).closest('tr').find('.dosen2-select');

                    if (dosen1Value) {
                        dosen2Dropdown.prop('disabled', false);
                    } else {
                        dosen2Dropdown.val('');
                        dosen2Dropdown.prop('disabled', true);
                    }
                });
            }
            // ========================================
            // Event handler for deleting class rows
            // ========================================
            $(document).on('click', '.btn-hapus-kelas', function() {
                $(this).closest('tr').remove(); // Remove the class row
                updateTextareaKodeAjar();
            });
            // ========================================
            // Event handler for "Hapus Semua Kelas" button
            // ========================================
            $(document).on('click', '.btn-hapus-semua-kelas', function() {
                var makulKode = $(this).data('kode'); // Get Mata Kuliah code
                // Clear all class rows for this Mata Kuliah
                $('#class-rows-' + makulKode + ' tbody').empty();
                updateTextareaKodeAjar();
            });
            // ========================================
            // Event handler for "Manual" dropdown items
            // ========================================
            $(document).on('click', '.manual-kelas-option', function(e) {
                e.preventDefault(); // Prevent default anchor click behavior

                var makulKode = $(this).data('kode');
                var jumlahKelas = $(this).data('kelas');
                var row = $('#row-makul-' + makulKode);
                var kodeInfo = row.data('info');
                var isMakulPilihan = row.find('.makul-checkbox').length >
                    0; // Mengecek apakah ini Mata Kuliah Pilihan
                if (!isMakulPilihan || row.find('.makul-checkbox').is(':checked')) {
                    $('#class-rows-' + makulKode + ' tbody').empty();
                    for (let i = 0; i < jumlahKelas; i++) {
                        let classLetter = String.fromCharCode(65 + i);
                        // Hanya ubah semester untuk Mata Kuliah Pilihan
                        var semesterValue = isMakulPilihan && currentSemester == 0 ? 7 : (isMakulPilihan &&
                            currentSemester == 1 ? 6 : row.data('semester'));

                        var newRow = `
                <tr data-info="${kodeInfo}" data-kode="${makulKode}" data-kelas="${classLetter}" data-semester="${semesterValue}" data-sks="${row.data('sks')}">
                    <td>${classLetter}</td>
                    <td>
                        <select class="form-control dosen1-select" name="dosen1_${makulKode}_${classLetter}" data-makul="${makulKode}" data-class="${classLetter}">
                            <option value="">Pilih Dosen 1</option>
                            @foreach ($dosens as $dosen)
                                <option value="{{ $dosen->kode_dosen }}">{{ $dosen->nama_dosen }}</option>
                            @endforeach
                        </select>
                    </td>
                    <td>
                        <select class="form-control dosen2-select" name="dosen2_${makulKode}_${classLetter}" data-makul="${makulKode}" data-class="${classLetter}">
                            <option value="">Pilih Dosen 2 (Optional)</option>
                            @foreach ($dosens as $dosen)
                                <option value="{{ $dosen->kode_dosen }}">{{ $dosen->nama_dosen }}</option>
                            @endforeach
                        </select>
                    </td>
                    <td class="kode-ajar">${kodeInfo} <span style="color: red;">(Dosen Belum Dipilih)</span></td>
                    <td>
                        <button class="btn btn-danger btn-hapus-kelas" data-kelas="${classLetter}" data-kode="${makulKode}">Hapus</button>
                    </td>
                </tr>`;
                        $('#class-rows-' + makulKode + ' tbody').append(newRow);
                    }
                    updateTextareaKodeAjar();
                }
            });
            // ========================================
            // Fetch and Update Dosen Options (For Dosen Selection)
            // ========================================
            function updateDosenOptions(row) {
                var selectedDosen1 = row.find('.dosen1-select').val();
                var selectedDosen2 = row.find('.dosen2-select').val();
                var dosen1Select = row.find('.dosen1-select');
                var dosen2Select = row.find('.dosen2-select');
                dosen1Select.find('option').show();
                dosen2Select.find('option').show();
                if (selectedDosen2) {
                    dosen1Select.find(`option[value="${selectedDosen2}"]`).hide();
                }
                if (selectedDosen1) {
                    dosen2Select.find(`option[value="${selectedDosen1}"]`).hide();
                }
            }

            $(document).on('change', '.dosen1-select', function() {
                var row = $(this).closest('tr');
                updateDosenOptions(row);

                var classLetter = row.find('td:first').text();
                var dosen1 = $(this).val();
                var dosen2 = row.find('.dosen2-select').val();

                updateKodeAjar(row, classLetter, dosen1, dosen2);
            });

            $(document).on('change', '.dosen2-select', function() {
                var row = $(this).closest('tr');
                updateDosenOptions(row);

                var classLetter = row.find('td:first').text();
                var dosen1 = row.find('.dosen1-select').val();
                var dosen2 = $(this).val();

                updateKodeAjar(row, classLetter, dosen1, dosen2);
            });

            function updateKodeAjar(row, classLetter, dosen1, dosen2) {
                var kodeInfo = row.data('info');
                var classType = dosen2 ? `S${classLetter} ${classLetter}` : classLetter;
                var kodeDosen = dosen2 ? `${dosen1}/${dosen2}` : dosen1 ||
                    '<span style="color: red;">Dosen Belum Dipilih</span>';
                var kodeAjar = `${kodeInfo} ${classType} ${kodeDosen}`;
                row.find('.kode-ajar').html(kodeAjar);

                updateTextareaKodeAjar();
            }

            function updateTextareaKodeAjar() {
                var kodeAjarTexts = [];

                $('tr[data-info]').each(function() {
                    var row = $(this);
                    var kodeAjar = row.find('.kode-ajar').text();
                    var makulKode = row.data('kode');
                    var classLetter = row.data('kelas');
                    var isMakulPilihan = row.find('.makul-checkbox').length >
                        0; // Mengecek apakah ini Mata Kuliah Pilihan
                    var semesterValue = isMakulPilihan && currentSemester == 0 ? "7" : (isMakulPilihan &&
                        currentSemester == 1 ? "6" : row.data('semester')
                    ); // Sesuaikan nilai semester hanya untuk Mata Kuliah Pilihan
                    var sks = row.data('sks');
                    var dosen1 = row.find('.dosen1-select').val();
                    var dosen2 = row.find('.dosen2-select').val();
                    var kuota = $('#kuota-' + makulKode).val();

                    if (kodeAjar && kodeAjar.trim() !== "") {
                        var namaDosen1 = row.find('.dosen1-select option:selected').text();
                        var namaDosen2 = dosen2 ? row.find('.dosen2-select option:selected').text() : '';
                        var dosenFormatted = dosen2 ? `${dosen1}/${dosen2}` : dosen1;
                        var namaDosenFormatted = dosen2 ? `${namaDosen1}/${namaDosen2}` : namaDosen1;
                        var result =
                            `["${kodeAjar}", "${makulKode}", "${dosenFormatted}", "${dosen1}", "${dosen2}", "${namaDosenFormatted}", "${classLetter}", "${semesterValue}", "${sks}", "${kuota}"]`;

                        kodeAjarTexts.push(result.trim());
                    }
                });

                // Memperbarui input textarea dengan data kode ajar
                $('#inputDescription').val(kodeAjarTexts.join('\n'));
            }
            // ========================================
            // Checkbox Limit for Mata Kuliah Pilihan
            // ========================================
            $(document).on('change', '.makul-checkbox', function() {
                const maxSelected = 6;

                const selected = $('.makul-checkbox:checked');
                if (selected.length > maxSelected) {
                    alert(`You can only select up to ${maxSelected} Mata Kuliah Pilihan.`);
                    $(this).prop('checked', false);
                }

                // Disable unchecked checkboxes if the limit is reached
                if (selected.length >= maxSelected) {
                    $('.makul-checkbox:not(:checked)').prop('disabled', true);
                } else {
                    $('.makul-checkbox').prop('disabled', false);
                }
            });

            // ========================================
            // Fetch and display number of students for each Mata Kuliah
            // ========================================
            function fetchJumlahMahasiswa() {
                let kodeMasaInput = '{{ $masaInput->kode_masa_input ?? '' }}';

                if (!kodeMasaInput) {
                    kodeMasaInput = $('#kode_masa_input').val();
                }

                $.ajax({
                    url: '{{ route('get.jumlah.mahasiswa') }}',
                    method: 'GET',
                    data: {
                        kode_masa_input: kodeMasaInput
                    },
                    success: function(response) {
                        $.each(response, function(kode, jumlah) {
                            let row = $('#row-makul-' + kode);
                            if (row.length > 0) {
                                row.find('.jumlah-mahasiswa').text(jumlah);
                            }
                        });
                    },
                    error: function(xhr) {
                        console.error('Error fetching jumlah mahasiswa:', xhr);
                        alert("Failed to fetch jumlah mahasiswa. Please try again.");
                    }
                });
            }
            fetchJumlahMahasiswa();
            $('#refreshJumlahMahasiswa').on('click', function() {
                fetchJumlahMahasiswa();
            });
        });
    </script>
    <script>
        $(document).ready(function() {
            let kodeAjarSelectionCount = {};
            let lecturerMap = {};
            let timeMap = {};

            $('#buatJadwalModal').on('show.bs.modal', function() {
                $.ajax({
                    url: '/admin/scheduling/input/admin-scheduling-create',
                    method: 'GET',
                    success: function(response) {
                        var jadwalBody = $('#jadwalData tbody');
                        jadwalBody.empty();

                        response.forEach(function(row) {
                            if (row.empty) {
                                jadwalBody.append(
                                    '<tr style="background-color: black;" id="rowPembatas"><td colspan="14">&nbsp;</td></tr>'
                                );
                            } else {
                                var newRow = `
                <tr class="schedule-row" data-day="${row.day}" data-session="${row.session}" data-classroom="${row.classroom}" style="background-color: gray;">
                    <td>${row.day}</td>
                    <td>${row.session_time}</td>
                    <td>
                        <select class="kode-ajar-dropdown form-control">
                        </select>
                    </td>
                    <td></td>
                    <td></td> <!-- Keterangan Column -->
                    <!-- Additional empty columns -->
                    <td></td><td></td><td></td><td></td><td></td><td></td><td></td><td>${row.classroom}</td><td></td>
                </tr>
            `;
                                jadwalBody.append(newRow);
                            }
                        });

                        const kodeAjarData = parseTextareaData();
                        populateDropdownOptions(kodeAjarData);
                        updateTableRowOnKodeAjarSelect(kodeAjarData);
                    },
                    error: function(xhr, status, error) {
                        alert('Error while fetching schedule data: ' + error);
                    }
                });
            });

            function parseTextareaData() {
                const kodeAjarData = [];
                const textareaValue = $('#inputDescription').val().trim();

                if (textareaValue) {
                    const lines = textareaValue.split('\n');
                    lines.forEach((line) => {
                        try {
                            const parsedLine = JSON.parse(line);

                            const kodeAjarEntry = {
                                kodeAjar: parsedLine[0],
                                makulKode: parsedLine[1],
                                dosen1: parsedLine[3],
                                dosen2: parsedLine[4] || '',
                                namaDosenFormatted: parsedLine[5],
                                classLetter: parsedLine[6],
                                semester: parseInt(parsedLine[7], 10), // Ensure parsing as integer
                                sks: parseInt(parsedLine[8], 10), // Ensure parsing as integer
                                kuota: parseInt(parsedLine[9], 10),
                            };

                            kodeAjarData.push(kodeAjarEntry);
                        } catch (e) {
                            console.error('Invalid JSON line:', line, 'Error:', e.message);
                        }
                    });
                }

                return kodeAjarData;
            }

            function populateDropdownOptions(kodeAjarData) {
                const dropdowns = $('.kode-ajar-dropdown');

                dropdowns.each(function() {
                    const dropdown = $(this);
                    dropdown.empty();
                    dropdown.append('<option value="">Pilih Kode Ajar</option>');
                    dropdown.append('<option value="N/A">N/A</option>');
                    kodeAjarData.forEach((entry) => {
                        if (entry.sks === 4) {
                            dropdown.append(
                                `<option value="${entry.kodeAjar}_1">${entry.kodeAjar}_1</option>`
                            );
                            dropdown.append(
                                `<option value="${entry.kodeAjar}_2">${entry.kodeAjar}_2</option>`
                            );
                        } else {
                            dropdown.append(
                                `<option value="${entry.kodeAjar}">${entry.kodeAjar}</option>`
                            );
                        }
                    });
                });
            }

            // Function to update dropdown visibility based on selected values
            function updateDropdownVisibility() {
                const selectedValues = [];

                // Get all selected values
                $('.kode-ajar-dropdown').each(function() {
                    const selectedValue = $(this).val();
                    if (selectedValue) {
                        selectedValues.push(selectedValue);
                    }
                });

                // Hide selected values from other dropdowns
                $('.kode-ajar-dropdown').each(function() {
                    const dropdown = $(this);
                    const currentValue = dropdown.val();
                    dropdown.find('option').each(function() {
                        const option = $(this);
                        const optionValue = option.val();

                        if (selectedValues.includes(optionValue) && optionValue !== currentValue &&
                            optionValue !== 'N/A') {
                            option.hide(); // Hide already selected values
                        } else {
                            option.show(); // Show available values
                        }
                    });
                });
            }

            function resetRowAlerts() {
                $('.schedule-row').each(function() {
                    const row = $(this);
                    row.css('background-color', 'white');
                    row.find('td:eq(13)').text(''); // Clear 'Keterangan' column
                });
            }

            function checkForDuplicateLecturers() {
                const lecturerMap = {};

                $('.schedule-row').each(function() {
                    const row = $(this);
                    const keteranganCell = row.find('td:eq(13)');
                    const dosen1 = row.find('td:eq(5)').text().trim();
                    const dosen2 = row.find('td:eq(6)').text().trim();
                    const day = row.data('day');
                    const session = row.data('session');
                    const daySessionKey = `${day}-${session}`;
                    // row.css('background-color', '');
                    // keteranganCell.text('');

                    if (!lecturerMap[daySessionKey]) {
                        lecturerMap[daySessionKey] = [];
                    }

                    [dosen1, dosen2].forEach((dosen) => {
                        if (dosen && lecturerMap[daySessionKey].includes(dosen) && dosen !==
                            "MKU") {
                            row.css('background-color', 'red');
                            keteranganCell.text(
                                `Dosen "${dosen}" sudah ditempatkan pada sesi ini.`);
                        } else if (dosen) {
                            lecturerMap[daySessionKey].push(dosen);
                        }
                    });
                });
            }

            $(document).on('change', '.dosen1-select, .dosen2-select', function() {
                checkForDuplicateLecturers();
            });

            $('#buatJadwalModal').on('hidden.bs.modal', function() {
                lecturerMap = {};
                timeMap = {};
                resetRowAlerts(); // Reset all alerts when the modal is closed
                kodeAjarSelectionCount = {};
                updateDropdownVisibility();
            });

            function checkForTimeConflicts() {
                const timeMap = {};

                $('.schedule-row').each(function() {
                    const row = $(this);
                    const keteranganCell = row.find('td:eq(13)');
                    const day = row.data('day');
                    const session = row.data('session');
                    const startTime = row.find('td:eq(1)').data('start-time');
                    const endTime = row.find('td:eq(1)').data('end-time');
                    const classroom = row.find('td:eq(12)').text().trim();
                    // row.css('background-color', '');
                    // keteranganCell.text('');

                    if (!startTime || !endTime || !classroom) return;

                    const dayClassroomKey = `${day}-${classroom}`;

                    if (!timeMap[dayClassroomKey]) {
                        timeMap[dayClassroomKey] = {};
                    }

                    function checkSessionPair(previousSession, currentSession) {
                        const previous = timeMap[dayClassroomKey][previousSession];
                        if (previous) {
                            if (isTimeOverlap(previous.startTime, previous.endTime, startTime, endTime)) {
                                previous.row.css('background-color', 'red');
                                previous.row.find('td:eq(13)').text(
                                    'Waktu kuliah bertabrakan dengan sesi lain.');
                                row.css('background-color', 'red');
                                keteranganCell.text('Waktu kuliah bertabrakan dengan sesi lain.');
                            }
                        }
                    }

                    if (session === 2) {
                        checkSessionPair(1, 2);
                    } else if (session === 4) {
                        checkSessionPair(3, 4);
                    }

                    timeMap[dayClassroomKey][session] = {
                        startTime: startTime,
                        endTime: endTime,
                        row: row
                    };
                });
            }

            function isTimeOverlap(startTime1, endTime1, startTime2, endTime2) {
                return (startTime1 < endTime2 && startTime2 < endTime1);
            }

            // Handle changes in dropdown (Kode Ajar or lecturer selection)
            $(document).on('change', '.kode-ajar-dropdown, .dosen1-select, .dosen2-select', function() {
                resetRowAlerts(); // Clear all previous alerts
                checkForDuplicateLecturers(); // Check for lecturer duplicates
                checkForTimeConflicts(); // Check for time conflicts
            });

            function getSKSFromValue(kodeAjar) {
                var sksMatch = kodeAjar.match(/SKS-(\d+)/);
                return sksMatch ? parseInt(sksMatch[1]) : 0;
            }

            function calculateTimeForSKS(day, session, sks) {
                var startTime, endTime;

                if (['Senin', 'Selasa', 'Rabu', 'Kamis'].includes(day)) {
                    switch (session) {
                        case 1:
                            startTime = '07:30';
                            endTime = sks === 2 || sks === 4 ? '09:10' : '10:00';
                            break;
                        case 2:
                            startTime = sks === 2 || sks === 4 ? '10:10' : '09:20';
                            endTime = '11:50';
                            break;
                        case 3:
                            startTime = '12:45';
                            endTime = sks === 2 || sks === 4 ? '14:25' : '15:15';
                            break;
                        case 4:
                            startTime = '14:45';
                            endTime = sks === 2 || sks === 4 ? '16:25' : '17:15';
                            break;
                    }
                }

                if (day === 'Jumat') {
                    switch (session) {
                        case 1:
                            startTime = '07:30';
                            endTime = '09:10';
                            break;
                        case 2:
                            startTime = '09:20';
                            endTime = '11:00';
                            break;
                        case 3:
                            startTime = '13:00';
                            endTime = sks === 2 || sks === 4 ? '14:40' : '15:30';
                            break;
                        case 4:
                            startTime = '15:35';
                            endTime = '17:15';
                            break;
                    }
                }
                return `${startTime} s/d ${endTime}`;
            }

            function updateTableRowOnKodeAjarSelect(kodeAjarData) {
                $(document).on('change', '.kode-ajar-dropdown', function() {
                    const selectedValue = $(this).val();
                    const row = $(this).closest('tr');
                    const originalDay = row.data('day');
                    const originalSessionTime = row.data('session-time');
                    const previousValue = $(this).data('previousValue');
                    const originalClassroom = row.data('classroom');
                    const day = row.data('day');
                    const session = row.data('session');

                    // Remove previous selection count
                    if (previousValue && previousValue !== 'N/A') {
                        const baseKodeAjar = previousValue.replace(/_1|_2/, ''); // Strip _1 or _2
                        if (kodeAjarSelectionCount[baseKodeAjar]) {
                            kodeAjarSelectionCount[baseKodeAjar]--;
                            if (kodeAjarSelectionCount[baseKodeAjar] === 0) {
                                delete kodeAjarSelectionCount[baseKodeAjar];
                            }
                        }
                    }

                    // Handle N/A case
                    if (selectedValue === 'N/A') {
                        $(this).data('previousValue', '');
                        row.find('td').not(':eq(2)').empty();
                        row.find('td:eq(0)').text('');
                        row.find('td:eq(1)').text('');
                        row.find('td:eq(12)').text('');
                        row.removeAttr('data-kodeAjar'); // Remove data-kodeAjar when N/A is selected
                        row.css('background-color', 'black');
                        updateDropdownVisibility();
                        return;
                    }

                    // Handle empty case (reset row)
                    if (selectedValue === '') {
                        $(this).data('previousValue', '');
                        row.find('td:first').text(originalDay);
                        row.find('td:eq(1)').text('');
                        row.find('td:eq(12)').text(originalClassroom);
                        row.find('td').not(':eq(0), :eq(1), :eq(2), :eq(12)').empty();
                        row.removeAttr('data-kodeAjar'); // Remove data-kodeAjar when no value is selected
                        row.css('background-color', 'gray');
                        updateDropdownVisibility();
                        return;
                    }

                    // Handle regular kodeAjar or kodeAjar with _1 or _2
                    const baseKodeAjar = selectedValue.replace(/_1|_2/, ''); // Strip _1 or _2
                    const entry = kodeAjarData.find((e) => e.kodeAjar === baseKodeAjar);

                    if (entry) {
                        row.find('td:first').text(originalDay);
                        row.find('td:eq(1)').text(originalSessionTime);
                        row.find('td:eq(3)').text(entry.makulKode);
                        row.find('td:eq(4)').text(entry.dosen1 + (entry.dosen2 ? `/${entry.dosen2}` : ''));
                        row.find('td:eq(5)').text(entry.dosen1);
                        row.find('td:eq(6)').text(entry.dosen2 || '');
                        row.find('td:eq(7)').text(entry.classLetter);
                        row.find('td:eq(8)').text(entry.semester);
                        row.find('td:eq(9)').text(entry.sks);
                        row.find('td:eq(10)').text(entry.kuota);
                        row.find('td:eq(11)').text(entry.namaDosenFormatted);
                        row.find('td:eq(12)').text(originalClassroom);
                        // row.css('background-color', 'white');

                        // Set data-kodeAjar to the base value
                        row.attr('data-kodeAjar', baseKodeAjar);

                        $(this).data('previousValue', selectedValue);

                        // Update selection count for the base kodeAjar
                        if (baseKodeAjar in kodeAjarSelectionCount) {
                            kodeAjarSelectionCount[baseKodeAjar]++;
                        } else {
                            kodeAjarSelectionCount[baseKodeAjar] = 1;
                        }
                    }

                    // Calculate SKS and new time if applicable
                    const sks = getSKSFromValue(selectedValue);
                    const newTime = calculateTimeForSKS(day, session, sks);
                    if (newTime) {
                        const [startTime, endTime] = newTime.split(' s/d ');
                        row.find('td:eq(1)').data('start-time', startTime);
                        row.find('td:eq(1)').data('end-time', endTime);
                        row.find('td:eq(1)').text(newTime);
                    }

                    // Check for duplicate lecturers and time conflicts
                    checkForDuplicateLecturers();
                    checkForTimeConflicts();
                    updateDropdownVisibility();
                });
            }

            //buatotomatis
            // New function for automatic schedule creation
            $('#buatOtomatis').on('click', function() {
                const kodeAjarData = parseTextareaData(); // Get kodeAjar data
                const days = ['Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat'];
                const sksOptionsPerRoom = {}; // Store SKS options per room

                // Loop through each day and session
                days.forEach((day) => {
                    for (let session = 1; session <= 4; session++) {
                        let rows = $(
                            `tr.schedule-row[data-day="${day}"][data-session="${session}"]`);
                        let classroomCount = rows
                            .length; // Count classrooms available for this session

                        let semestersAvailable = getSemestersFromOptions(
                            kodeAjarData); // Get list of available semesters
                        let semesterAssignment = assignClassroomsToSemesters(semestersAvailable,
                            classroomCount); // Assign classrooms to semesters

                        let semesterIndex = 0; // To track assignment across classrooms
                        rows.each(function(index) {
                            const row = $(this);
                            const dropdown = row.find('.kode-ajar-dropdown');
                            const room = row.find('td:eq(12)').text()
                                .trim(); // Get the room number

                            // Cek apakah dropdown sudah terisi, jika ya, lewati
                            if (dropdown.val() !== '') {
                                // Dropdown ini sudah terisi, tidak perlu diubah
                                return;
                            }

                            // Get available options for the current semester
                            const assignedSemester = semesterAssignment[semesterIndex %
                                semesterAssignment.length];
                            const availableOptions = getAvailableOptionsForSemester(
                                kodeAjarData, session, day, room, sksOptionsPerRoom,
                                lecturerMap, timeMap, assignedSemester
                            );

                            if (availableOptions.length > 0) {
                                // Pilih opsi pertama yang tidak menyebabkan konflik dosen atau waktu
                                let selectedKodeAjar = availableOptions.find(option =>
                                    !isLecturerInConflict(option, day, session,
                                        kodeAjarData) &&
                                    !isTimeInConflict(day, session, room, option,
                                        kodeAjarData)
                                );

                                if (selectedKodeAjar) {
                                    let entry = kodeAjarData.find(e => e.kodeAjar ===
                                        selectedKodeAjar.replace(/_1|_2/, ''));

                                    if (entry) {
                                        // Isi opsi pada dropdown
                                        dropdown.val(selectedKodeAjar).trigger('change');

                                        // Set opsi SKS untuk ruangan saat ini dan sesi berikutnya di ruangan tersebut
                                        sksOptionsPerRoom[room] = setSKSOptionsForRoom(
                                            session, entry.sks, day, room);

                                        // Set waktu untuk SKS yang dipilih
                                        const newTime = calculateTimeForSKS(day, session,
                                            entry.sks);
                                        const [startTime, endTime] = newTime.split(' s/d ');
                                        row.find('td:eq(1)').data('start-time', startTime);
                                        row.find('td:eq(1)').data('end-time', endTime);
                                        row.find('td:eq(1)').text(newTime);

                                        // Update peta dosen dan waktu untuk sesi dan ruangan tersebut
                                        updateLecturerMap(day, session, entry.dosen1, entry
                                            .dosen2, lecturerMap);
                                        updateTimeMap(day, session, room, startTime,
                                            endTime, timeMap);

                                        // Perbarui visibilitas dropdown untuk menghindari duplikasi
                                        updateDropdownVisibility();
                                    }
                                } else {
                                    // Tidak ada opsi tersedia tanpa konflik, pilih "N/A"
                                    dropdown.val("N/A").trigger('change');
                                }
                            } else {
                                // Tidak ada opsi tersedia sama sekali, pilih "N/A"
                                dropdown.val("N/A").trigger('change');
                            }

                            semesterIndex++; // Pindah ke ruang kelas/semester berikutnya
                        });
                    }
                });

                // Periksa konflik setelah pengisian otomatis
                checkForDuplicateLecturers();
                checkForTimeConflicts();
            });

            // Function to get available semesters from kodeAjarData
            function getSemestersFromOptions(kodeAjarData) {
                let semesters = new Set();
                kodeAjarData.forEach(entry => {
                    semesters.add(entry.semester); // Collect unique semesters
                });
                return Array.from(semesters);
            }

            // Function to assign classrooms to semesters
            function assignClassroomsToSemesters(semesters, classroomCount) {
                let semesterAssignment = [];

                // Jika semester lebih dari 3, rotasikan untuk memastikan semua semester terpilih
                let roomsPerSemester = Math.floor(classroomCount / semesters.length);
                let remainingRooms = classroomCount % semesters.length;

                // Distribusi ruang untuk setiap semester
                semesters.forEach((semester, i) => {
                    // Berikan sejumlah ruang ke semester ini
                    for (let j = 0; j < roomsPerSemester; j++) {
                        semesterAssignment.push(semester);
                    }
                    // Jika ada sisa ruang, berikan satu ruang tambahan ke beberapa semester pertama
                    if (remainingRooms > 0) {
                        semesterAssignment.push(semester);
                        remainingRooms--;
                    }
                });

                // Jika lebih dari 3 semester, kita akan shuffle untuk memastikan distribusi merata
                shuffleArray(semesterAssignment);

                return semesterAssignment;
            }

            // Helper function to get available options for a specific semester
            function getAvailableOptionsForSemester(kodeAjarData, session, day, room, sksOptionsPerRoom,
                lecturerMap, timeMap, assignedSemester) {
                let availableOptions = getAvailableOptionsForSession(kodeAjarData, session, day, room,
                    sksOptionsPerRoom, lecturerMap, timeMap);

                // Filter options based on the assigned semester
                return availableOptions.filter(option => {
                    let baseKodeAjar = option.replace(/_1|_2/, ''); // Strip _1 or _2 suffix
                    let entry = kodeAjarData.find(e => e.kodeAjar === baseKodeAjar);
                    return entry && entry.semester === assignedSemester;
                });
            }

            // Helper function to shuffle an array (Fisher-Yates shuffle algorithm)
            function shuffleArray(array) {
                for (let i = array.length - 1; i > 0; i--) {
                    const j = Math.floor(Math.random() * (i + 1));
                    [array[i], array[j]] = [array[j], array[i]];
                }
            }

            // Helper function to get available options for a given session, day, and room
            function getAvailableOptionsForSession(kodeAjarData, session, day, room, sksOptionsPerRoom, lecturerMap,
                timeMap) {
                let availableOptions = [];

                // Get current SKS options for the room (from earlier sessions in that room)
                let currentSKS = sksOptionsPerRoom[room] || {
                    1: [2, 3, 4],
                    2: [2, 3, 4],
                    3: [2, 3, 4],
                    4: [2, 3, 4]
                };

                // For Friday, only SKS 2 and 4 are allowed for sessions 1 and 2 in that room
                if (day === 'Jumat' && (session === 1 || session === 2)) {
                    currentSKS[session] = [2, 4];
                }

                // Check available Kode Ajar based on the room's SKS limitation for that session
                kodeAjarData.forEach((entry) => {
                    if (currentSKS[session].includes(entry.sks)) {
                        if (entry.sks === 4) {
                            availableOptions.push(`${entry.kodeAjar}_1`, `${entry.kodeAjar}_2`);
                        } else {
                            availableOptions.push(`${entry.kodeAjar}`);
                        }
                    }
                });

                return availableOptions.filter(option => !isOptionSelected(option));
            }

            // Helper function to check if the selected time slot conflicts with existing schedules
            function isTimeInConflict(day, session, room, kodeAjar, kodeAjarData) {
                let baseKodeAjar = kodeAjar.replace(/_1|_2/, ''); // Remove _1 or _2 suffix for SKS-4
                let entry = kodeAjarData.find(e => e.kodeAjar === baseKodeAjar);

                if (entry) {
                    const sks = entry.sks;
                    const currentStartTime = calculateStartTimeForSKS(day, session, sks);
                    const currentEndTime = calculateEndTimeForSKS(day, session, sks);

                    let roomSchedule = timeMap[`${day}-${room}`] || [];

                    // Check if current time overlaps with any existing time slots in the room
                    return roomSchedule.some(schedule => isTimeOverlap(schedule.startTime, schedule.endTime,
                        currentStartTime, currentEndTime));
                }
                return false;
            }

            // Helper function to check if a lecturer is already assigned in the same session
            function isLecturerInConflict(kodeAjar, day, session, kodeAjarData) {
                let baseKodeAjar = kodeAjar.replace(/_1|_2/, ''); // Remove _1 or _2 suffix for SKS-4
                let entry = kodeAjarData.find(e => e.kodeAjar === baseKodeAjar);

                if (entry) {
                    let lecturersInSession = lecturerMap[`${day}-${session}`] || [];
                    return lecturersInSession.includes(entry.dosen1) || lecturersInSession.includes(entry.dosen2);
                }
                return false;
            }

            // Helper function to update lecturer map for a session
            function updateLecturerMap(day, session, dosen1, dosen2, lecturerMap) {
                let key = `${day}-${session}`;

                if (!lecturerMap[key]) {
                    lecturerMap[key] = [];
                }

                if (dosen1 && !lecturerMap[key].includes(dosen1)) {
                    lecturerMap[key].push(dosen1);
                }

                if (dosen2 && !lecturerMap[key].includes(dosen2)) {
                    lecturerMap[key].push(dosen2);
                }
            }

            // Helper function to update time map for a session and room
            function updateTimeMap(day, session, room, startTime, endTime, timeMap) {
                let key = `${day}-${room}`;

                if (!timeMap[key]) {
                    timeMap[key] = [];
                }

                timeMap[key].push({
                    session,
                    startTime,
                    endTime
                });
            }

            // Helper function to set SKS options for subsequent sessions based on current selection
            function setSKSOptionsForRoom(session, selectedSKS, day, room) {
                let sksOptions = {
                    1: [2, 3, 4],
                    2: [2, 3, 4],
                    3: [2, 3, 4],
                    4: [2, 3, 4]
                };

                if (['Senin', 'Selasa', 'Rabu', 'Kamis'].includes(day)) {
                    if (session === 1 && (selectedSKS === 2 || selectedSKS === 4)) {
                        sksOptions[2] = [2, 3, 4];
                    } else if (session === 1 && selectedSKS === 3) {
                        sksOptions[2] = [2, 4];
                    } else if (session === 3 && (selectedSKS === 2 || selectedSKS === 4)) {
                        sksOptions[4] = [2, 3, 4];
                    } else if (session === 3 && selectedSKS === 3) {
                        sksOptions[4] = ['N/A'];
                    }
                } else if (day === 'Jumat') {
                    if (session === 1 || session === 2) {
                        sksOptions[session] = [2, 4];
                    } else if (session === 3) {
                        sksOptions[4] = [2];
                    }
                }

                return sksOptions;
            }

            // Helper function to check if a dropdown option has already been selected
            function isOptionSelected(option) {
                let selectedOptions = [];
                $('.kode-ajar-dropdown').each(function() {
                    let selectedValue = $(this).val();
                    if (selectedValue) {
                        selectedOptions.push(selectedValue);
                    }
                });
                return selectedOptions.includes(option);
            }

            function calculateStartTimeForSKS(day, session, sks) {
                let startTime;

                if (['Senin', 'Selasa', 'Rabu', 'Kamis'].includes(day)) {
                    switch (session) {
                        case 1:
                            startTime = '07:30';
                            break;
                        case 2:
                            startTime = sks === 2 || sks === 4 ? '10:10' : '09:20';
                            break;
                        case 3:
                            startTime = '12:45';
                            break;
                        case 4:
                            startTime = '14:45';
                            break;
                    }
                } else if (day === 'Jumat') {
                    switch (session) {
                        case 1:
                            startTime = '07:30';
                            break;
                        case 2:
                            startTime = '09:20';
                            break;
                        case 3:
                            startTime = '13:00';
                            break;
                        case 4:
                            startTime = '15:35';
                            break;
                    }
                }
                return startTime;
            }

            function calculateEndTimeForSKS(day, session, sks) {
                let endTime;

                if (['Senin', 'Selasa', 'Rabu', 'Kamis'].includes(day)) {
                    switch (session) {
                        case 1:
                            endTime = sks === 2 || sks === 4 ? '09:10' : '10:00';
                            break;
                        case 2:
                            endTime = '11:50';
                            break;
                        case 3:
                            endTime = sks === 2 || sks === 4 ? '14:25' : '15:15';
                            break;
                        case 4:
                            endTime = sks === 2 || sks === 4 ? '16:25' : '17:15';
                            break;
                    }
                } else if (day === 'Jumat') {
                    switch (session) {
                        case 1:
                            endTime = '09:10';
                            break;
                        case 2:
                            endTime = '11:00';
                            break;
                        case 3:
                            endTime = sks === 2 || sks === 4 ? '14:40' : '15:30';
                            break;
                        case 4:
                            endTime = '17:15';
                            break;
                    }
                }
                return endTime;
            }

            function setSKSOptionsForRoom(session, selectedSKS, day, room) {
                let sksOptions = {
                    1: [2, 3, 4],
                    2: [2, 3, 4],
                    3: [2, 3, 4],
                    4: [2, 3, 4]
                };

                if (['Senin', 'Selasa', 'Rabu', 'Kamis'].includes(day)) {
                    if (session === 1 && (selectedSKS === 2 || selectedSKS === 4)) {
                        sksOptions[2] = [2, 3, 4];
                    } else if (session === 1 && selectedSKS === 3) {
                        sksOptions[2] = [2, 4];
                    } else if (session === 3 && (selectedSKS === 2 || selectedSKS === 4)) {
                        sksOptions[4] = [2, 3, 4];
                    } else if (session === 3 && selectedSKS === 3) {
                        sksOptions[4] = ['N/A'];
                    }
                } else if (day === 'Jumat') {
                    if (session === 1 || session === 2) {
                        sksOptions[session] = [2, 4];
                    } else if (session === 3) {
                        sksOptions[4] = [2];
                    }
                }

                return sksOptions;
            }
        });
    </script>
    <script>
        $(document).ready(function() {
            var kodeMasaInput = '{{ $masaInput->kode_masa_input ?? '' }}'; // Pastikan ini string

            $('#saveJadwal').on('click', function() {
                var jadwalPerHari = {};
                var ajaxRequests = []; // Menampung semua request AJAX
                var daysWithExistingData = []; // Menampung hari dengan data yang sudah ada
                var overwriteRequests = []; // Track overwrite requests

                // Looping setiap row tabel untuk mengumpulkan data berdasarkan hari
                $('#tabelJadwal tbody tr').each(function() {
                    var row = $(this);
                    if (row.attr('id') === 'rowPembatas') return; // Abaikan row pembatas

                    var kodeAjar = row.find('td:eq(2) select').val(); // Nilai 'kode_ajar'
                    var day = row.attr('data-day'); // Ambil data hari dari atribut 'data-day'

                    var rowData = {
                        'data_hari': day,
                        'jadwal_data': [
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(0)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(1)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : kodeAjar,
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(3)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(4)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(5)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(6)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(7)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(8)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(9)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(10)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(11)').text().trim(),
                            kodeAjar === "N/A" || kodeAjar === null ? "N/A" : row.find(
                                'td:eq(12)').text().trim()
                        ]
                    };

                    // Kumpulkan data jadwal berdasarkan hari
                    if (!jadwalPerHari[day]) {
                        jadwalPerHari[day] = [];
                    }
                    jadwalPerHari[day].push(rowData.jadwal_data);
                });

                // Kirim data ke server untuk setiap hari dan cek apakah sudah ada
                $.each(jadwalPerHari, function(day, jadwalHari) {
                    // Simpan setiap request dalam array
                    let request = $.ajax({
                        url: '{{ route('admin.storeJadwalArray') }}',
                        method: 'POST',
                        data: {
                            _token: '{{ csrf_token() }}',
                            kodeMasaInput: kodeMasaInput,
                            data_hari: day,
                            jadwalData: jadwalHari
                        },
                        success: function(response) {
                            if (response.exists) {
                                // Jika data sudah ada, tambahkan hari ke array 'daysWithExistingData'
                                daysWithExistingData.push(day);
                            }
                        },
                        error: function() {
                            console.log(
                                'Terjadi kesalahan saat mengecek data untuk hari ' +
                                day + '.');
                        }
                    });

                    // Tambahkan request ke array
                    ajaxRequests.push(request);
                });

                // Tunggu semua request selesai
                $.when.apply($, ajaxRequests).done(function() {
                    // Jika ada hari dengan data yang sudah ada, tampilkan konfirmasi sekali
                    if (daysWithExistingData.length > 0) {
                        if (confirm('Data sudah ada. Anda yakin ingin mengubahnya?')) {
                            // User memilih proceed, lakukan overwrite untuk semua hari yang sudah ada datanya
                            $.each(jadwalPerHari, function(day, jadwalHari) {
                                if (daysWithExistingData.includes(day)) {
                                    let overwriteRequest = $.ajax({
                                        url: '{{ route('admin.overwriteJadwal') }}',
                                        method: 'POST',
                                        data: {
                                            _token: '{{ csrf_token() }}',
                                            kodeMasaInput: kodeMasaInput,
                                            data_hari: day,
                                            jadwalData: jadwalHari
                                        },
                                        success: function() {
                                            console.log('Data untuk ' + day +
                                                ' berhasil di-update.');
                                        },
                                        error: function() {
                                            console.log(
                                                'Gagal meng-update data untuk hari ' +
                                                day + '.');
                                        }
                                    });
                                    // Track overwrite requests
                                    overwriteRequests.push(overwriteRequest);
                                }
                            });

                            // Setelah semua overwrite selesai, tampilkan alert dan redirect
                            $.when.apply($, overwriteRequests).done(function() {
                                alert('Semua data berhasil di-update.');
                                window.location.href =
                                    '{{ route('adminScheduling') }}'; // Redirect setelah selesai
                            });
                        } else {
                            console.log('Pengiriman data dibatalkan oleh pengguna.');
                        }
                    } else {
                        // Jika tidak ada hari dengan data yang sudah ada, simpan data baru langsung
                        $.each(jadwalPerHari, function(day, jadwalHari) {
                            $.ajax({
                                url: '{{ route('admin.storeJadwalArray') }}',
                                method: 'POST',
                                data: {
                                    _token: '{{ csrf_token() }}',
                                    kodeMasaInput: kodeMasaInput,
                                    data_hari: day,
                                    jadwalData: jadwalHari
                                },
                                success: function() {
                                    console.log('Data untuk ' + day +
                                        ' berhasil disimpan.');
                                },
                                error: function() {
                                    console.log(
                                        'Terjadi kesalahan saat menyimpan data untuk hari ' +
                                        day + '.');
                                }
                            });
                        });

                        // Tampilkan alert setelah menyimpan data baru dan redirect
                        alert('Semua data berhasil disimpan.');
                        window.location.href =
                            '{{ route('adminScheduling') }}'; // Redirect setelah selesai
                    }
                });
            });
        });
    </script>
@endsection
@section('content')
    <div class="content">
        <div class="container-fluid">
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title center-text">Penjadwalan</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Input Configuration (Textarea for Kode Ajar) -->
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="inputDescription">Kode Ajar</label>
                                <textarea id="inputDescription" name="inputDescription" class="form-control" rows="4" style="height: 121px;"
                                    readonly></textarea>
                            </div>
                        </div>
                    </div>
                    <!-- Buat Jadwal Button -->
                    <div class="row">
                        <button type="submit" class="btn btn-info btn-block" data-toggle="modal"
                            data-target="#buatJadwalModal">Buat Jadwal</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <div class="col-12">
                <!-- Regular Mata Kuliah Table (Penjadwalan Mata Kuliah Semester Genap) -->
                <div class="card card-primary card-outline collapsed-card">
                    <div class="card-header">
                        <h3 class="card-title">Penjadwalan Mata Kuliah Semester
                            {{ $semester == 0 ? 'Ganjil' : 'Genap' }}</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <table id="makulTable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th width="5%">No</th>
                                    <th width="25%">Mata Kuliah</th>
                                    <th width="25%">Jumlah Mahasiswa</th>
                                    <th width="20%">Kuota Kelas</th>
                                    <th width="25%">Aksi Jumlah Kelas</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($makuls as $makul)
                                    <tr id="row-makul-{{ $makul->kode }}" data-kode="{{ $makul->kode }}"
                                        data-info="{{ $makul->mata_kuliah }} SEM-{{ $makul->semester }} SKS-{{ $makul->sks }}">
                                        <td>{{ $loop->iteration }}</td>
                                        <td>{{ $makul->mata_kuliah }}</td>
                                        <td class="jumlah-mahasiswa">{{ $jumlahMahasiswa[$makul->kode] ?? 0 }}</td>
                                        <td>
                                            <input type="number" name="kuota_{{ $makul->kode }}"
                                                id="kuota-{{ $makul->kode }}" class="form-control" min="1"
                                                max="99" value="20">
                                        </td>
                                        <td>
                                            <button class="btn btn-primary btn-buat-kelas"
                                                data-kode="{{ $makul->kode }}">Buat
                                                Kelas</button>
                                        </td>
                                    </tr>
                                    <tr class="class-rows" id="class-rows-{{ $makul->kode }}">
                                        <td colspan="5">
                                            <table class="table table-bordered">
                                                <tbody></tbody>
                                            </table>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <!-- Mata Kuliah Pilihan Table (IsPilihan = True) -->
                <div class="card card-primary card-outline collapsed-card">
                    <div class="card-header">
                        <h3 class="card-title">Mata Kuliah Pilihan</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-plus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <table id="makulPilihanTable" class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th width="3%"></th> <!-- Add space for styled checkbox -->
                                    <th width="2%">No</th>
                                    <th width="25%">Mata Kuliah</th>
                                    <th width="25%">Jumlah Mahasiswa</th>
                                    <th width="20%">Kuota Kelas</th>
                                    <th width="25%">Aksi Jumlah Kelas</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($makulPilihan as $makul)
                                    <tr id="row-makul-{{ $makul->kode }}">
                                        <!-- Checkbox column -->
                                        <td>
                                            <div class="icheck-pomegranate d-inline">
                                                <input type="checkbox" class="makul-checkbox"
                                                    id="checkbox{{ $makul->kode }}" name="makulPilihan[]"
                                                    value="{{ $makul->kode }}">
                                                <label for="checkbox{{ $makul->kode }}"></label>
                                            </div>
                                        </td>

                                        <!-- Other columns -->
                                        <td>{{ $loop->iteration }}</td>
                                        <td>
                                            <div class="row">
                                                {{ $makul->mata_kuliah }}
                                            </div>
                                            <div class="row">
                                                ({{ $makul->kode }})
                                            </div>
                                        </td>
                                        <td class="jumlah-mahasiswa">{{ $jumlahMahasiswa[$makul->kode] ?? 0 }}</td>
                                        <td>
                                            <input type="number" name="kuota_{{ $makul->kode }}"
                                                id="kuota-{{ $makul->kode }}" class="form-control" min="1"
                                                max="99" value="20">
                                        </td>
                                        <td>
                                            <button class="btn btn-primary btn-buat-kelas"
                                                data-kode="{{ $makul->kode }}">Buat
                                                Kelas</button>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <!-- Special Mata Kuliah: Kerja Praktik, PMKM, TA 1, TA 2 -->
                <div class="card card-primary card-outline">
                    <div class="card-header">
                        <h3 class="card-title">Kerja Praktik, PMKM, TA 1, TA 2</h3>
                        <div class="card-tools">
                            <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                <i class="fas fa-minus"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>No</th>
                                    <th>Mata Kuliah</th>
                                    <th>Jumlah Mahasiswa</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach ($specialMakuls as $makul)
                                    <tr id="row-makul-{{ $makul->kode }}">
                                        <td>{{ $loop->iteration }}</td>
                                        <td>{{ $makul->mata_kuliah }}</td>
                                        <td class="jumlah-mahasiswa">{{ $jumlahMahasiswa[$makul->kode] ?? 0 }}</td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal HTML -->
    <div class="modal fade" id="buatJadwalModal" tabindex="-1" aria-labelledby="buatJadwalModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="buatJadwalModalLabel">Jadwal Kelas</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Display the fetched data here as a string -->
                    <!-- Otomatis Button -->
                    <div class="row" style="margin-bottom: 20px;">
                        <div class="col-12" style="display:none;">
                            <div class="form-group col-6">
                                <input type="email" class="form-control" id="kode_masa_input"
                                    value="{{ $masaInput->kode_masa_input ?? '' }}">
                            </div>
                        </div>
                        <div class="col-12">
                            <button class="btn btn-block btn-info btn-lg" id="buatOtomatis">Buat Otomatis</button>
                        </div>
                    </div>
                    <div id="jadwalData" style="margin-top: 20px;">
                        <table class="table table-bordered" id="tabelJadwal">
                            <thead>
                                <tr>
                                    <th width="5%">Hari</th>
                                    <th width="10%">Jadwal Kuliah</th>
                                    <th width="20%">Pilih Kode Ajar</th>
                                    <th width="10%">Kode MK</th>
                                    <th width="5%">Kode Dosen</th>
                                    <th width="3%">Dosen 1</th>
                                    <th width="3%">Dosen 2</th>
                                    <th width="2%">Kelas</th>
                                    <th width="2%">SMTR</th>
                                    <th width="2%">SKS</th>
                                    <th width="3%">Kapasitas</th>
                                    <th width="15%">Nama Pengajar</th>
                                    <th width="3%">Ruang</th>
                                    <th width="17%">Keterangan</th> <!-- New column for Keterangan -->
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Schedule rows will be inserted here dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Tutup</button>
                    <button type="button" class="btn btn-primary" id="saveJadwal">Simpan Jadwal</button>
                </div>
            </div>
        </div>
    </div>
@endsection
